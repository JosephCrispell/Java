package identifyingHomoplasies;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.text.JTextComponent;

import geneticDistances.Sequence;
import methods.CalendarMethods;
import methods.GeneticMethods;
import phylogeneticTree.Node;

import javax.swing.JToolBar;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSpinner;
import javax.swing.JButton;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;

import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import java.awt.FlowLayout;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SpringLayout;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;

public class HomoplasyFinderGUI extends JFrame {

	/**
	 * Create public variables - accessible throughout class
	 */
	
	// Weird variable to avoid error in GUI
	private static final long serialVersionUID = 1L;
	
	// Create two variables to record the tree and FASTA files selected
	public String treeFile = "File Selected";
	public String fastaFile = "File Selected";
	
	// Create matching labels that will record to the user the tree and FASTA file selected
	public JLabel lblTreeFileSelected;
	public JLabel lblFastaFileSelected;
	
	// Set the directory that the file browsers will opne into - starts with home but will be updated to the previous directory opened
	public File directory = new File(System.getProperty("user.home"));
	
	// Console
	public JTextArea textArea;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					HomoplasyFinderGUI frame = new HomoplasyFinderGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public HomoplasyFinderGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 589, 343);
		SpringLayout springLayout = new SpringLayout();
		getContentPane().setLayout(springLayout);
		
		// Create a label for the tree file - located beside button and will update once tree file found
		lblTreeFileSelected = new JLabel(treeFile);
		springLayout.putConstraint(SpringLayout.NORTH, lblTreeFileSelected, 14, SpringLayout.NORTH, getContentPane());
		springLayout.putConstraint(SpringLayout.WEST, lblTreeFileSelected, 156, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, lblTreeFileSelected, -10, SpringLayout.EAST, getContentPane());
		getContentPane().add(lblTreeFileSelected);
		
		// Create browse button for tree file
		JButton btnTreeFile = new JButton("Find Tree File");
		springLayout.putConstraint(SpringLayout.WEST, btnTreeFile, 10, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, btnTreeFile, -18, SpringLayout.WEST, lblTreeFileSelected);
		
		// Add mouse listener that will open file chooser when tree file button clicked
		btnTreeFile.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Start a file browser
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setCurrentDirectory(directory);
				int result = fileChooser.showOpenDialog(null);
				
				// Wait for file selection
				if(result == JFileChooser.APPROVE_OPTION){
					
					// Record the file selected - update the associated tree label
					File selectedFile = fileChooser.getSelectedFile();
					treeFile = selectedFile.getAbsolutePath();
					lblTreeFileSelected.setText(selectedFile.getName());
					
					// Update the directory to open browser into
					directory = selectedFile.getParentFile();					
				}				
			}
		});
		springLayout.putConstraint(SpringLayout.NORTH, btnTreeFile, 10, SpringLayout.NORTH, getContentPane());
		getContentPane().add(btnTreeFile);
		
		// Create a label for the FASTA file - located beside button and will update once FASTA file found
		lblFastaFileSelected = new JLabel(fastaFile);
		springLayout.putConstraint(SpringLayout.NORTH, lblFastaFileSelected, 21, SpringLayout.SOUTH, lblTreeFileSelected);
		springLayout.putConstraint(SpringLayout.WEST, lblFastaFileSelected, 0, SpringLayout.WEST, lblTreeFileSelected);
		springLayout.putConstraint(SpringLayout.EAST, lblFastaFileSelected, -10, SpringLayout.EAST, getContentPane());
		getContentPane().add(lblFastaFileSelected);
		
		// Create browse button for FASTA file
		JButton btbFastaFile = new JButton("Find FASTA File");
		springLayout.putConstraint(SpringLayout.NORTH, btbFastaFile, 12, SpringLayout.SOUTH, btnTreeFile);
		springLayout.putConstraint(SpringLayout.EAST, btbFastaFile, 0, SpringLayout.EAST, btnTreeFile);
		springLayout.putConstraint(SpringLayout.WEST, btbFastaFile, 10, SpringLayout.WEST, getContentPane());
		
		// Add mouse listener that will open file chooser when FASTA file button clicked
		btbFastaFile.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Start a file browser
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setCurrentDirectory(directory);
				int result = fileChooser.showOpenDialog(null);
				
				// Wait for file selection
				if(result == JFileChooser.APPROVE_OPTION){
					
					// Record the file selected - update the associated tree label
					File selectedFile = fileChooser.getSelectedFile();
					treeFile = selectedFile.getAbsolutePath();
					lblFastaFileSelected.setText(selectedFile.getName());
					
					// Update the directory to open browser into
					directory = selectedFile.getParentFile();					
				}				
			}
		});
		getContentPane().add(btbFastaFile);
		
		// Add text area to print progress out to
		textArea = new JTextArea();
		textArea.setText("Console");
		textArea.setEditable(false);
		JScrollPane scrollPane = new JScrollPane(textArea);
		springLayout.putConstraint(SpringLayout.NORTH, scrollPane, -186, SpringLayout.SOUTH, getContentPane());
		springLayout.putConstraint(SpringLayout.WEST, scrollPane, 10, SpringLayout.WEST, getContentPane());
		springLayout.putConstraint(SpringLayout.SOUTH, scrollPane, -10, SpringLayout.SOUTH, getContentPane());
		springLayout.putConstraint(SpringLayout.EAST, scrollPane, 563, SpringLayout.WEST, getContentPane());
		getContentPane().add(scrollPane);		
		
		// Add run button to run homoplasyFinder
		JButton btnRun = new JButton("Run");
		springLayout.putConstraint(SpringLayout.NORTH, btnRun, 16, SpringLayout.SOUTH, lblFastaFileSelected);
		springLayout.putConstraint(SpringLayout.EAST, btnRun, -256, SpringLayout.EAST, getContentPane());
		btnRun.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				try {
					runHomoplasyFinder();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		getContentPane().add(btnRun);		
	}
	
	/**
	 * General methods area
	 * @throws IOException 
	 */
	
	public void runHomoplasyFinder() throws IOException{
		
		// Check that fasta and tree files have been changed
		if(treeFile.matches("))
		
		// Record that starting to run homoplasy finder
		textArea.setText("Running homoplasy finder...");
		
		// Get the current date
		String date = CalendarMethods.getCurrentDate("dd-MM-yy");
		
		// Read in tree
		textArea.append("Reading tree file...\n");
		Node tree = HomoplasyFinder4.readNewickTree(treeFile, false);
		
		// Read in the FASTA file
		textArea.append("Reading FASTA file...\n");
		Sequence[] sequences = GeneticMethods.readFastaFile(fastaFile, false);
		
		// Get the alleles in the population and the isolates they are associated with
		Hashtable<String, ArrayList<String>> alleles = HomoplasyFinder4.noteAllelesInPopulation(sequences, false, textArea);
		ArrayList<String> positions = HomoplasyFinder4.getAllelePositions(alleles);
		
		// Assign alleles
		Hashtable<String, Integer> assigned = new Hashtable<String, Integer>();
		HomoplasyFinder4.assignAllelesToCurrentNode(tree, alleles, positions, assigned,  HomoplasyFinder4.getSequenceIDs(sequences), false, textArea);
		
		int[] homoplasyPositions = HomoplasyFinder4.examineUnAssignedAlleles(assigned, alleles, false, directory.getAbsolutePath(), date, textArea);

		/**
		 * Return a FASTA file without the homoplasy sites
		 */
		HomoplasyFinder4.printFASTAWithoutHomoplasies(homoplasyPositions, directory.getAbsolutePath(), date, sequences, false, textArea);
	}
}
