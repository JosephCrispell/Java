package identifyingHomoplasies;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.text.JTextComponent;

import geneticDistances.Sequence;
import methods.CalendarMethods;
import methods.GeneticMethods;
import phylogeneticTree.Node;

import javax.swing.JToolBar;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSpinner;
import javax.swing.JButton;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;

import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import java.awt.FlowLayout;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SpringLayout;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.JRadioButton;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

public class HomoplasyFinderGUI extends JFrame {

	/**
	 * Create public variables - accessible throughout class
	 */
	
	// Weird variable to avoid error in GUI
	private static final long serialVersionUID = 1L;
	
	// Get the current date
	public String date = CalendarMethods.getCurrentDate("dd-MM-yy");
	
	// Create two variables to record the tree, FASTA, and report files selected
	public String treeFile = "None provided";
	public String fastaFile = "None provided";
	public String reportFile = "homoplasyReport_" + date + ".txt";
	public String outputFastaFile = "sequences_withoutHomoplasies_" + date + ".fasta";
	
	// Create matching labels that will record to the user the tree and FASTA file selected
	public JLabel lblTreeFileSelected;
	public JLabel lblFastaFileSelected;
	public JLabel lblReportFileSelected;
	public JLabel lblOutputFastaFileSelected;
	
	// Set the directory that the file browsers will opne into - starts with home but will be updated to the previous directory opened
	public File directory = new File(System.getProperty("user.home"));
	
	// Console
	public JTextArea textArea;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					HomoplasyFinderGUI frame = new HomoplasyFinderGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public HomoplasyFinderGUI() {
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 589, 496);
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{236, 319, 0};
		gridBagLayout.rowHeights = new int[]{23, 23, 23, 23, 40, 23, 33, 242, 0};
		gridBagLayout.columnWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		getContentPane().setLayout(gridBagLayout);
		
		// Create browse button for tree file
		JButton buttonTreeFile = new JButton("Find tree file");
		buttonTreeFile.setToolTipText("Select Newick formatted phylogenetic tree file");
		
		// Add mouse listener that will open file chooser when tree file button clicked
		buttonTreeFile.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Start a file browser
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setCurrentDirectory(directory);
				int result = fileChooser.showOpenDialog(null);
				
				// Wait for file selection
				if(result == JFileChooser.APPROVE_OPTION){
					
					// Record the file selected - update the associated tree label
					File selectedFile = fileChooser.getSelectedFile();
					treeFile = selectedFile.getAbsolutePath();
					lblTreeFileSelected.setText(selectedFile.getName());
					
					// Update the directory to open browser into
					directory = selectedFile.getParentFile();					
				}				
			}
		});
		GridBagConstraints gbc_buttonTreeFile = new GridBagConstraints();
		gbc_buttonTreeFile.anchor = GridBagConstraints.NORTH;
		gbc_buttonTreeFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_buttonTreeFile.insets = new Insets(0, 0, 5, 5);
		gbc_buttonTreeFile.gridx = 0;
		gbc_buttonTreeFile.gridy = 0;
		getContentPane().add(buttonTreeFile, gbc_buttonTreeFile);
		
		// Create browse button for FASTA file
		JButton buttonFastaFile = new JButton("Find FASTA file");
		buttonFastaFile.setToolTipText("Select FASTA file containing nucleotide alignment");
		
		// Add mouse listener that will open file chooser when FASTA file button clicked
		buttonFastaFile.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Start a file browser
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setCurrentDirectory(directory);
				int result = fileChooser.showOpenDialog(null);
				
				// Wait for file selection
				if(result == JFileChooser.APPROVE_OPTION){
					
					// Record the file selected - update the associated tree label
					File selectedFile = fileChooser.getSelectedFile();
					fastaFile = selectedFile.getAbsolutePath();
					lblFastaFileSelected.setText(selectedFile.getName());
					
					// Update the directory to open browser into
					directory = selectedFile.getParentFile();					
				}				
			}
		});
		
		// Create a label for the tree file - located beside button and will update once tree file found
		lblTreeFileSelected = new JLabel(treeFile);
		GridBagConstraints gbc_lblTreeFileSelected = new GridBagConstraints();
		gbc_lblTreeFileSelected.fill = GridBagConstraints.HORIZONTAL;
		gbc_lblTreeFileSelected.insets = new Insets(0, 0, 5, 0);
		gbc_lblTreeFileSelected.gridx = 1;
		gbc_lblTreeFileSelected.gridy = 0;
		getContentPane().add(lblTreeFileSelected, gbc_lblTreeFileSelected);
		GridBagConstraints gbc_buttonFastaFile = new GridBagConstraints();
		gbc_buttonFastaFile.anchor = GridBagConstraints.NORTH;
		gbc_buttonFastaFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_buttonFastaFile.insets = new Insets(0, 0, 5, 5);
		gbc_buttonFastaFile.gridx = 0;
		gbc_buttonFastaFile.gridy = 1;
		getContentPane().add(buttonFastaFile, gbc_buttonFastaFile);
		
		// Create browse button for Report file
		JButton buttonReportFile = new JButton("Change report file");
		buttonReportFile.setToolTipText("Select file to save homoplasyFinder report to");
		
		// Add mouse listener that will open file chooser when report file button clicked
		buttonReportFile.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Start a file browser
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setCurrentDirectory(directory);
				int result = fileChooser.showSaveDialog(null);
				
				// Wait for file selection
				if(result == JFileChooser.APPROVE_OPTION){
					
					// Record the file selected - update the associated report label
					File selectedFile = fileChooser.getSelectedFile();
					reportFile = selectedFile.getName();
					lblReportFileSelected.setText(selectedFile.getName());
					
					// Update the directory to open browser into
					directory = selectedFile.getParentFile();					
				}				
			}
		});
		
		// Create a label for the FASTA file - located beside button and will update once FASTA file found
		lblFastaFileSelected = new JLabel(fastaFile);
		GridBagConstraints gbc_lblFastaFileSelected = new GridBagConstraints();
		gbc_lblFastaFileSelected.fill = GridBagConstraints.HORIZONTAL;
		gbc_lblFastaFileSelected.insets = new Insets(0, 0, 5, 0);
		gbc_lblFastaFileSelected.gridx = 1;
		gbc_lblFastaFileSelected.gridy = 1;
		getContentPane().add(lblFastaFileSelected, gbc_lblFastaFileSelected);
		GridBagConstraints gbc_buttonReportFile = new GridBagConstraints();
		gbc_buttonReportFile.anchor = GridBagConstraints.NORTH;
		gbc_buttonReportFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_buttonReportFile.insets = new Insets(0, 0, 5, 5);
		gbc_buttonReportFile.gridx = 0;
		gbc_buttonReportFile.gridy = 2;
		getContentPane().add(buttonReportFile, gbc_buttonReportFile);
		
		// Create a label for the Report file - located beside button and will update if file changed
		lblReportFileSelected = new JLabel(reportFile);
		GridBagConstraints gbc_lblReportFileSelected = new GridBagConstraints();
		gbc_lblReportFileSelected.fill = GridBagConstraints.HORIZONTAL;
		gbc_lblReportFileSelected.insets = new Insets(0, 0, 5, 0);
		gbc_lblReportFileSelected.gridx = 1;
		gbc_lblReportFileSelected.gridy = 2;
		getContentPane().add(lblReportFileSelected, gbc_lblReportFileSelected);
		
		// Create a label to choose the output FASTA file
		JButton buttonOutputFastaFile = new JButton("Change output sequences file");
		buttonOutputFastaFile.setToolTipText("Select the file to print the sequences without homoplasies into");
		
		// Add mouse listener that will open file chooser when report file button clicked
		buttonOutputFastaFile.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Start a file browser
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setCurrentDirectory(directory);
				int result = fileChooser.showSaveDialog(null);
				
				// Wait for file selection
				if(result == JFileChooser.APPROVE_OPTION){
					
					// Record the file selected - update the associated report label
					File selectedFile = fileChooser.getSelectedFile();
					outputFastaFile = selectedFile.getName();
					lblOutputFastaFileSelected.setText(selectedFile.getName());
					
					// Update the directory to open browser into
					directory = selectedFile.getParentFile();					
				}				
			}
		});
		GridBagConstraints gbc_buttonOutputFastaFile = new GridBagConstraints();
		gbc_buttonOutputFastaFile.anchor = GridBagConstraints.NORTH;
		gbc_buttonOutputFastaFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_buttonOutputFastaFile.insets = new Insets(0, 0, 5, 5);
		gbc_buttonOutputFastaFile.gridx = 0;
		gbc_buttonOutputFastaFile.gridy = 3;
		getContentPane().add(buttonOutputFastaFile, gbc_buttonOutputFastaFile);
		
		// Create a label indicating the chosen output fasta file
		lblOutputFastaFileSelected = new JLabel(outputFastaFile);
		GridBagConstraints gbc_lblOutputFastaFileSelected = new GridBagConstraints();
		gbc_lblOutputFastaFileSelected.fill = GridBagConstraints.HORIZONTAL;
		gbc_lblOutputFastaFileSelected.insets = new Insets(0, 0, 5, 0);
		gbc_lblOutputFastaFileSelected.gridx = 1;
		gbc_lblOutputFastaFileSelected.gridy = 3;
		getContentPane().add(lblOutputFastaFileSelected, gbc_lblOutputFastaFileSelected);
		
		// Add run button to run homoplasyFinder
		JButton buttonRun = new JButton("Run");
		buttonRun.setToolTipText("Run homoplasyFinder on the selected tree and FASTA file");
		buttonRun.addMouseListener(new MouseAdapter() {
			
			// Add listener for mouse click
			@Override
			public void mouseClicked(MouseEvent e) {
				
				// Run homoplasy finder when mouse clicked
				try {
					
					if(treeFile.matches("None provided") == false && fastaFile.matches("None provided") == false){
						
						// Run homoplasyFinder
						runHomoplasyFinder();
					}else{
						textArea.setText("Please select tree and FASTA files...");
					}
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		});
		GridBagConstraints gbc_buttonRun = new GridBagConstraints();
		gbc_buttonRun.anchor = GridBagConstraints.NORTHWEST;
		gbc_buttonRun.insets = new Insets(0, 0, 5, 0);
		gbc_buttonRun.gridx = 1;
		gbc_buttonRun.gridy = 5;
		getContentPane().add(buttonRun, gbc_buttonRun);
		
		// Add text area to print progress out to
		textArea = new JTextArea();
		textArea.setText("Console");
		textArea.setEditable(false);
		JScrollPane scrollPane = new JScrollPane(textArea);
		GridBagConstraints gbc_scrollPane = new GridBagConstraints();
		gbc_scrollPane.fill = GridBagConstraints.BOTH;
		gbc_scrollPane.gridwidth = 2;
		gbc_scrollPane.gridx = 0;
		gbc_scrollPane.gridy = 7;
		getContentPane().add(scrollPane, gbc_scrollPane);
		
	}
	
	/**
	 * General methods area
	 * @throws IOException 
	 */
	
	public void runHomoplasyFinder() throws IOException{
		
		// Read in tree
		Node tree = HomoplasyFinder4.readNewickTree(treeFile, false);
		
		// Read in the FASTA file
		Sequence[] sequences = GeneticMethods.readFastaFile(fastaFile, false);
		
		// Get the alleles in the population and the isolates they are associated with
		Hashtable<String, ArrayList<String>> alleles = HomoplasyFinder4.noteAllelesInPopulation(sequences, false);
		ArrayList<String> positions = HomoplasyFinder4.getAllelePositions(alleles);
		
		// Assign alleles
		Hashtable<String, Integer> assigned = new Hashtable<String, Integer>();
		HomoplasyFinder4.assignAllelesToCurrentNode(tree, alleles, positions, assigned,  HomoplasyFinder4.getSequenceIDs(sequences), false);
		
		int[] homoplasyPositions = HomoplasyFinder4.examineUnAssignedAlleles(assigned, alleles, false, directory.getAbsolutePath() + "\\", reportFile, date, textArea);
		
		/**
		 * Return a FASTA file without the homoplasy sites
		 */
		HomoplasyFinder4.printFASTAWithoutHomoplasies(homoplasyPositions, directory.getAbsolutePath() + "\\", outputFastaFile, date, sequences, false);
	}
}
