package methods;

import java.io.IOException;

public class SmithWaterman {

	public static void main(String[] args) throws IOException{
		
		char[] a = "GGTTGACTA".toCharArray();
		char[] b = "TGTTACGG".toCharArray();
		
		int match = 3;
		int misMatch = -3;
		int gapPenalty = 2;
		
		int[][] scoringMatrix = new int[a.length + 1][b.length + 1];
		
		printScoringMatrix(scoringMatrix, a, b);
		
		for(int i = 1; i <= a.length; i++){
			
			for(int j = 1; j <= b.length; j++){
				
				scoringMatrix[i-1][j-1] = score(a, b, i-1, j-1, scoringMatrix, match, misMatch, gapPenalty);
				
			}
		}
		
		System.out.println("\n\n");
		
		printScoringMatrix(scoringMatrix, a, b);
	}
	
	public static int score(char[] a, char[]b, int i, int j, int[][] scoringMatrix, int match, int misMatch, int gapPenalty){
		
		// Initialise an array to score the scores for each type of movement through the scoring matrix
		int[] scores = new int[4];
		
		// Calculate the diagonal score
		scores[0] = scoringMatrix[i-1][j-1] + compareNucleotides(a[i], b[i], match, misMatch);
		
		// Calculate the horizontal score
		scores[1] = scoringMatrix[i][j-1] - gapPenalty;
		
		// Calculate the vertical score
		scores[2] = scoringMatrix[i-1][j] - gapPenalty;
		
		// Choose the max score from diagonal, horizontal, and vertical - note 0 also included
		return ArrayMethods.max(scores);
	}
	
	public static int compareNucleotides(char a, char b, int match, int misMatch){
		
		int output = misMatch;
		if(a == b){
			output = match;
		}
		
		return output;
	}
	
	public static void printScoringMatrix(int[][] scoringMatrix, char[] a, char[] b){
		
		System.out.println("    " + ArrayMethods.toString(b, " "));
		for(int i = 0; i < scoringMatrix.length; i++){
			
			if(i != 0){
				System.out.print(a[i-1] + " ");
			}else{
				System.out.print("  ");
			}
			for(int j = 0; j < scoringMatrix[0].length; j++){
				
				System.out.print(scoringMatrix[i][j] + " ");
			}
			System.out.println();
		}		
	}

}
